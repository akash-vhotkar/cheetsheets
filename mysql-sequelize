

Prerequisites 
https://sequelize.org/docs/v6/other-topics/migrations/
Association in sequelize 
https://sequelize.org/docs/v6/core-concepts/assocs/


Installation
npm install --save-dev sequelize-cli

Setup 
npx sequelize-cli init

After initialization 
config, contains config file, which tells CLI how to connect with database
models, contains all models for your project
migrations, contains all migration files
seeders, contains all seed files

Configuration file of sequelize 
require('dotenv').config(); // this is important!
module.exports = {
"development": {
    "username": process.env.DB_USER,
    "password": process.env.DB_PASSWORD,
    "database": process.env.DB_NAME,
    "host": process.env.DB_HOST,
    "dialect": "mysql",
    "logging": false

},
"test": {
    "username": process.env.DB_USER,
    "password": process.env.DB_PASSWORD,
    "database": process.env.DB_NAME,
    "host": process.env.DB_HOST,
    "dialect": "mysql",
    "logging": false
},
"production": {
    "username": process.env.DB_USER,
    "password": process.env.DB_PASSWORD,
    "database": process.env.DB_NAME,
    "host": process.env.DB_HOST,
    "dialect": "mysql",
    "logging": false
},
"define":{
    "timestamp":true
}
};

What is difference between migrations and seeders 
Migrations are for creating/altering/deleting tables.
 Seeds are for filling those tables with data.


Commands in sequelize 

localhost seeds command
npx sequelize-cli seed:generate --name demo-user
sequelize  db:seed: all
sequelize db:seed  --seed seedname


heroku seed cammand  or AWS SEED commands 
heroku run bash
npx sequelize-cli seed:generate --name demo-user
npx  sequelize-cli db:seed --seed 20211004093459-addsuperadmin.js
npx  sequelize-cli db:seed --seed 20220419141958-demo-user.js
npx migratese quelize-cli db:seed:all
npx sequelize-cli db:seed:all
npx sequelize-cli db:migrate


Table Schema in sequelize 
'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class hpadmin extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
    }
  };
  hpadmin.init({
    first_name:{
      type:DataTypes.STRING,
      allowNull: false 
    },
    last_name :{
      type :DataTypes.STRING,
      allowNull: false
    },
    mobile: {
      type :DataTypes.STRING,
      allowNull: false
    },
    email: {
      type : DataTypes.STRING,
      allowNull: false
    },
    superadmin:{
      type : DataTypes.BOOLEAN,
      allowNull: false ,
      defaultValue: false
    },
    password:{
      type :DataTypes.STRING,
      allowNull: false
    },
    image:{
      type :DataTypes.STRING,
      allowNull: true,
      defaultValue : "avatar.png"
    },
    isactive: {
      type :DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false
    },
    status: {
      type: DataTypes.STRING,
      allowNull: false
    },
    attempts :{
      type : DataTypes.INTEGER,
      allowNull: false,
      defaultValue:  3
    },
    isemailverified: {
      type:DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false
    }, 
    ismobileverified :{
      type :DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false
    },
    isverified: {
      type :DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false
    },
    refercode : {
      type :DataTypes.STRING ,
      allowNull: false
    },
    howid :{
      type :DataTypes.INTEGER,
      allowNull: false
    }
  }, {
    sequelize,
    modelName: 'hpadmin',
    paranoid: true
  });
  return hpadmin;
};





Table migrations

'use strict';
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('hpadmins', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      } ,
       first_name:{
        type:Sequelize.STRING,
        allowNull: false 
      },
      last_name :{
        type :Sequelize.STRING,
        allowNull: false
      },
      mobile: {
        type :Sequelize.STRING,
        allowNull: false
      },
      email: {
        type : Sequelize.STRING,
        allowNull: false
      },
      superadmin:{
        type : Sequelize.BOOLEAN,
        allowNull: false ,
        defaultValue: false
      },
      password:{
        type :Sequelize.STRING,
        allowNull: false
      },
      image:{
        type :Sequelize.STRING,
        allowNull: true,
        defaultValue : "avatar.png"
      },
      isactive: {
        type :Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      status: {
        type: Sequelize.STRING,
        allowNull: false
      },
      attempts :{
        type : Sequelize.INTEGER,
        allowNull: false,
        defaultValue:  3
      },
      isemailverified: {
        type:Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      }, 
      ismobileverified :{
        type :Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      isverified: {
        type :Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      refercode : {
        type :Sequelize.STRING ,
        allowNull: false
      },
      howid :{
        type :Sequelize.INTEGER,
        allowNull: false
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      deletedAt :{
        allowNull: true ,
        type : Sequelize.DATE(),
        default : null
      }
    });
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Hpadmins');
  }
};


// end here


Seeders in sequelize 


'use strict';
const bcrypt  = require('bcryptjs');
const { generaterefercode } = require('../util');

module.exports = {
  up: async (queryInterface, Sequelize) => {
const refercode  = generaterefercode("Holypennies");   
    const arr = [{
      first_name : "hpadmin",
      last_name :"hpadmin",
      email:"hpadmin@gmail.com",
      mobile : "91913710445",
      password: await bcrypt.hash("abcd@1234", 10),// password abcd
      status : "active",
      isactive : true,
      superadmin: true,
      image:"avatar.png",
      refercode ,
      createdAt : new Date(),
      updatedAt : new Date(),
      deletedAt : null,
      refercode : "hp393483",
      howid : 222222
    }]

    const  newhow  = [{
      howid : 222222,
      how_name: "Holypennies",
      how_desc: "thise is house of workship were the data can form",
      address: "india ",
      country_code: "india",
      state: "maharashtra",
      city: "mumbai",
      status: "accepted",
      refercode,
      zipcode: 6575656,
      isactive: true,
      createdAt : new Date(),
      updatedAt : new Date(),
      deletedAt : null
    }]
  


    const createhow  = await queryInterface.bulkInsert('hows', newhow, {});
    const createhphow =  await queryInterface.bulkInsert('hpadmins',arr, {});
    const adduser  =await queryInterface.bulkInsert('users',[{ email : "akash@iotric.com", mobile : "919137104459", isactive: true, isblock : false, createdAt : new Date(), updatedAt : new Date(), deletedAt : null}], {});
  },

  down: async (queryInterface, Sequelize) => {
     await queryInterface.bulkDelete('hpadmins', null, {});
     await queryInterface.bulkDelete('how', null, {});
     await  queryInterface.bulkDelete('users', null , {});
  }
};




What is paranoid table
A paranoid table is one that, when told to delete a record, it will not truly delete it. Instead, a special column called deletedAt will have its value set to the timestamp of that deletion request.
We need to pass paranoid true in schema declaration 

 Schema mapping and configuration  in sequelize  and Association 

'use strict';
const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config.js')[env];
const db = {};
let sequelize;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}

fs
  .readdirSync(__dirname)
  .filter(file => {
    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;
//  otp tables for the donor and house of workship
db.howadminotpdb  = require('./otp/howotp')(sequelize, Sequelize.DataTypes);

db.donordb.hasMany(db.donorlogdb , {foreignKey: "donorid", onDelete:'CASCADE'} );
db.donorlogdb.belongsTo(db.donordb , { foreignKey :"donorid"})
module.exports = db;

